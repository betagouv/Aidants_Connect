"""
Django settings for aidants_connect project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import logging
import os
import re
import sys
from datetime import datetime, timedelta
from itertools import chain
from pathlib import Path
from typing import Optional, Union

from django.conf import global_settings
from django.utils.crypto import get_random_string
from django.utils.translation import gettext_noop

import dj_database_url
import sentry_sdk
from dotenv import load_dotenv
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration

from aidants_connect.utils import strtobool

load_dotenv(verbose=True)


def getenv_bool(key: str, default_value: Optional[bool] = None) -> bool:
    """Obtains a boolean value from an environement variable

    Authorized values are casing variants of "true", "yes", "false" and "no" as well as
    0 and 1. Any other valuer will result in an error unless a default value
    is provided.

    If the environment variable does not exist and no default value is provided,
    an error will be thrown

    :param key: The name the environment variable to load
    :param default_value: The default value to take if env var does not exist
    """
    var = os.getenv(key, default_value)

    if var is None:
        raise ValueError(
            f"{key} is not present in environment variables "
            "and no default value was provided"
        )

    if isinstance(var, bool):
        return var

    return strtobool(var) if default_value is None else strtobool(var, default_value)


HOST = os.environ["HOST"]
SSL = getenv_bool("SSL", True)

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# FC as FI
FC_AS_FI_CALLBACK_URL = os.environ["FC_AS_FI_CALLBACK_URL"]
FC_AS_FI_CALLBACK_URL_V2 = os.environ["FC_AS_FI_CALLBACK_URL_V2"]
FC_AS_FI_ID = os.environ["FC_AS_FI_ID"]
HASH_FC_AS_FI_SECRET = os.environ["HASH_FC_AS_FI_SECRET"]
FC_AS_FI_HASH_SALT = os.environ["FC_AS_FI_HASH_SALT"]
FC_AS_FI_LOGOUT_REDIRECT_URI = os.environ["FC_AS_FI_LOGOUT_REDIRECT_URI"]
FC_AS_FI_LOGOUT_REDIRECT_URI_V2 = os.environ["FC_AS_FI_LOGOUT_REDIRECT_URI_V2"]

# FC as FS
FC_AS_FS_BASE_URL = os.environ["FC_AS_FS_BASE_URL"]
FC_AS_FS_ID = os.environ["FC_AS_FS_ID"]
FC_AS_FS_SECRET = os.environ["FC_AS_FS_SECRET"]
FC_AS_FS_CALLBACK_URL = os.environ["FC_AS_FS_CALLBACK_URL"]

FC_CONNECTION_AGE = int(os.environ["FC_CONNECTION_AGE"])

if os.environ.get("FC_AS_FS_TEST_PORT"):
    FC_AS_FS_TEST_PORT = int(os.environ["FC_AS_FS_TEST_PORT"])
else:
    FC_AS_FS_TEST_PORT = 0

GET_PREFERRED_USERNAME_FROM_FC = getenv_bool("GET_PREFERRED_USERNAME_FROM_FC", True)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("APP_SECRET")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenv_bool("DEBUG", False)

# We support a comma-separated list of allowed hosts.
ENV_SEPARATOR = ","
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost").split(ENV_SEPARATOR)

# Init Sentry if the DSN is defined
SENTRY_DSN = os.getenv("SENTRY_DSN", None)

if SENTRY_DSN:
    SENTRY_ENV = os.getenv("SENTRY_ENV", "unknown")
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            DjangoIntegration(),
            LoggingIntegration(level=logging.ERROR, event_level=logging.ERROR),
        ],
        environment=SENTRY_ENV,
    )

# Application definition

INSTALLED_APPS = [
    "aidants_connect_overrides",
    "django.contrib.admin",
    "nested_admin",
    "magicauth",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "rest_framework",
    "django_otp",
    "django_otp.plugins.otp_static",
    "django_otp.plugins.otp_totp",
    "django_celery_beat",
    "django_extensions",
    "template_partials",
    "importmap",
    "pgtrigger",
    "import_export",
    "phonenumber_field",
    "widget_tweaks",
    "dsfr",
    "django_blocklist",
    "django_js_reverse",
    "aidants_connect",
    "aidants_connect_common",
    "aidants_connect_web",
    "aidants_connect_habilitation",
    "aidants_connect_pico_cms",
    "aidants_connect_erp",
]

# Additionnal app to execute only during tests
if "test" in sys.argv:
    INSTALLED_APPS.append("aidants_connect_common.tests.third_party_service_mocks")

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.contrib.sites.middleware.CurrentSiteMiddleware",
    "django_referrer_policy.middleware.ReferrerPolicyMiddleware",
    "csp.middleware.CSPMiddleware",
    "django_otp.middleware.OTPMiddleware",
]

# Add debug toolbar
if DEBUG and "test" not in sys.argv:
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")
    INTERNAL_IPS = ["127.0.0.1"] + ALLOWED_HOSTS

if "test" not in sys.argv:
    MIDDLEWARE.insert(0, "aidants_connect_common.middleware.BlocklistMiddleware2")
    MIDDLEWARE.append("aidants_connect_common.middleware.ThrottleIPMiddleware")

ROOT_URLCONF = "aidants_connect.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "dsfr.context_processors.site_config",
                "importmap.context_processors.importmap",
                "aidants_connect_common.context_processors.settings_variables",
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

FORM_RENDERER = "aidants_connect.utils.ACDjangoTemplates"

WSGI_APPLICATION = "aidants_connect.wsgi.application"

DATABASES = {
    "default": dj_database_url.config(
        default="postgres://localhost:5432/aidants_connect",
        ssl_require=True if not DEBUG else None,
    )
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
        )
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "fr"
LANGUAGES = global_settings.LANGUAGES + [
    # Add language using ISO 639-3 language code
    # https://fr.wikipedia.org/wiki/ISO_639-3
    ("pus", gettext_noop("Pachto")),
    ("prs", gettext_noop("Dari")),
    ("rfc", gettext_noop("Créole réunionnais")),
    ("gcf", gettext_noop("Créole guadeloupéen/martiniquais")),
]

# ISO 639-1 language code for language that write right-to-left
LANGUAGES_BIDI = global_settings.LANGUAGES_BIDI + ["pus", "prs"]

TIME_ZONE = "Europe/Paris"

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = [os.path.join(BASE_DIR, "locale")]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_ROOT = "staticfiles"
STATIC_URL = "/static/"

LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "home_page"
ACTIVITY_CHECK_URL = "activity_check"
ACTIVITY_CHECK_THRESHOLD = int(os.getenv("ACTIVITY_CHECK_THRESHOLD"))
ACTIVITY_CHECK_DURATION = timedelta(minutes=ACTIVITY_CHECK_THRESHOLD)

AUTH_USER_MODEL = "aidants_connect_web.Aidant"

JS_REVERSE_EXCLUDE_NAMESPACES = ["admin", "djdt", "otpadmin"]
JS_MINIFY = False

DEMARCHES = {
    "papiers": {
        "titre": "Papiers - Citoyenneté - Élections",
        "titre_court": "Papiers",
        "description": "État-civil, Passeport, Élections, Papiers à conserver, Carte d'identité…",  # NOQA
        "service_exemples": ["ANTS", "Défenseur des droits"],
        "icon": "/static/images/icons/papiers.svg",
    },
    "famille": {
        "titre": "Famille - Scolarité",
        "titre_court": "Famille",
        "description": "Allocations familiales, Naissance, Mariage, Pacs, Scolarité…",
        "service_exemples": ["CAF", "ameli.fr", "EduConnect"],
        "icon": "/static/images/icons/famille.svg",
    },
    "social": {
        "titre": "Social - Santé",
        "titre_court": "Social",
        "description": "Carte vitale, Chômage, Handicap, RSA, Personnes âgées…",
        "service_exemples": ["ameli.fr", "MSA"],
        "icon": "/static/images/icons/social.svg",
    },
    "travail": {
        "titre": "Travail - Formation",
        "titre_court": "Travail",
        "description": "CDD, Concours, Retraite, Démission, Période d'essai…",
        "service_exemples": [
            "France Travail",
            "Mon compte formation",
            "info-retraite.fr",
        ],
        "icon": "/static/images/icons/travail.svg",
    },
    "logement": {
        "titre": "Logement",
        "titre_court": "Logement",
        "description": "Allocations logement, Permis de construire, Logement social, Fin de bail…",  # NOQA
        "service_exemples": ["CAF", "Enedis"],
        "icon": "/static/images/icons/logement.svg",
    },
    "transports": {
        "titre": "Transports - Mobilité",
        "titre_court": "Transports",
        "description": "Carte grise, Permis de conduire, Contrôle technique, Infractions…",  # NOQA
        "service_exemples": ["ANTS", "ANTAI", "Crit'air"],
        "icon": "/static/images/icons/transports.svg",
    },
    "argent": {
        "titre": "Argent - Impôts - Consommation",
        "titre_court": "Argent",
        "description": "Crédit immobilier, Impôts, Consommation, Livret A, Assurance, "
        "Surendettement…",
        "service_exemples": ["Impots.gouv", "Timbres fiscaux", "Banque"],
        "icon": "/static/images/icons/argent.svg",
    },
    "justice": {
        "titre": "Justice",
        "titre_court": "Justice",
        "description": "Casier judiciaire, Plainte, Aide juridictionnelle, Saisie…",
        "service_exemples": ["Télérecours citoyens"],
        "icon": "/static/images/icons/justice.svg",
    },
    "etranger": {
        "titre": "Étranger - Europe",
        "titre_court": "Étranger",
        "description": "Titres de séjour, Attestation d’accueil, Regroupement familial…",  # NOQA
        "service_exemples": ["OFPRA"],
        "icon": "/static/images/icons/etranger.svg",
    },
    "loisirs": {
        "titre": "Loisirs - Sport - Culture",
        "titre_court": "Loisirs",
        "description": "Animaux, Permis bateau, Tourisme, Permis de chasser…",
        "service_exemples": ["Ariane"],
        "icon": "/static/images/icons/loisirs.svg",
    },
}

# CGU
CGU_CURRENT_VERSION = "0.3"

MANDAT_TEMPLATE_DIR = "aidants_connect_web/mandat_templates"
MANDAT_TEMPLATE_CURRENT_FILE = "20240618_mandat.html"
MANDAT_TEMPLATE_PATH = os.path.join(MANDAT_TEMPLATE_DIR, MANDAT_TEMPLATE_CURRENT_FILE)
ATTESTATION_SALT = os.getenv("ATTESTATION_SALT", "")

# Magic Auth
MAGICAUTH_EMAIL_FIELD = "email"
MAGICAUTH_FROM_EMAIL = os.getenv("MAGICAUTH_FROM_EMAIL")
MAGICAUTH_LOGGED_IN_REDIRECT_URL_NAME = "espace_aidant_home"
MAGICAUTH_LOGIN_VIEW_TEMPLATE = "login/login.html"
MAGICAUTH_EMAIL_SENT_VIEW_TEMPLATE = "login/email_sent.html"
MAGICAUTH_EMAIL_HTML_TEMPLATE = "login/email_template.mjml"
MAGICAUTH_EMAIL_TEXT_TEMPLATE = "login/email_template.txt"
MAGICAUTH_WAIT_VIEW_TEMPLATE = "login/wait.html"
MAGICAUTH_ENABLE_2FA = True

# https://github.com/betagouv/django-magicauth/blob/8a8143388bb15fad2823528201e22a31817da243/magicauth/settings.py  # NOQA
MAGICAUTH_TOKEN_DURATION_SECONDS = int(
    os.getenv("MAGICAUTH_TOKEN_DURATION_SECONDS", 5 * 60)
)

# TOTP
OTP_TOTP_ISSUER = os.getenv("OTP_TOTP_ISSUER", "Aidants Connect")
LOWER_TOTP_TOLERANCE_ON_LOGIN = getenv_bool("LOWER_TOTP_TOLERANCE_ON_LOGIN", True)

# Emails
EMAIL_BACKEND = os.getenv(
    "EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend"
)

# # if file based email backend is used (debug)
EMAIL_FILE_PATH = Path(os.path.dirname(__file__)).parent / "tmp_email_as_file"
# # if smtp backend is used
EMAIL_HOST = os.getenv("EMAIL_HOST", None)
EMAIL_PORT = os.getenv("EMAIL_PORT", None)
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", None)
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", None)
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", None)
EMAIL_USE_SSL = os.getenv("EMAIL_USE_SSL", None)


BACKUP_EMAIL_HOST = os.getenv("BACKUP_EMAIL_HOST", EMAIL_HOST)
BACKUP_EMAIL_PORT = os.getenv("BACKUP_EMAIL_PORT", EMAIL_PORT)
BACKUP_EMAIL_HOST_USER = os.getenv("BACKUP_EMAIL_HOST_USER", EMAIL_HOST_USER)
BACKUP_EMAIL_HOST_PASSWORD = os.getenv("BACKUP_MAIL_HOST_PASSWORD", EMAIL_HOST_PASSWORD)
BACKUP_EMAIL_USE_TLS = os.getenv("BACKUP_EMAIL_USE_TLS", EMAIL_USE_TLS)
BACKUP_EMAIL_USE_SSL = os.getenv("BACKUP_EMAIL_USE_SSL", EMAIL_USE_SSL)

TDL_NEED_BACKUP_SMTP = os.getenv("TDL_NEED_BACKUP_SMTP", "laposte.net")

# # if email backend is aidants_connect_web.mail.ForceSpecificSenderBackend
EMAIL_EXTRA_HEADERS = os.getenv("EMAIL_EXTRA_HEADERS", None)
EMAIL_SENDER = os.getenv("EMAIL_SENDER", os.getenv("ADMIN_EMAIL"))

# Emails from the server
SERVER_EMAIL = os.getenv("SERVER_EMAIL", os.getenv("ADMIN_EMAIL"))
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", SERVER_EMAIL)
# ADMIN_HONEYPOT_EMAIL_ADMINS = os.getenv("ADMIN_HONEYPOT_EMAIL_ADMINS", SERVER_EMAIL)

# Security headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"
REFERRER_POLICY = "strict-origin"

# Scripts and other resources
STIMULUS_JS_URL = "https://unpkg.com/stimulus@3.2.2/dist/stimulus.js"
MD_EDITOR_JS_URL = "https://unpkg.com/easymde/dist/easymde.min.js"
MD_EDITOR_CSS_URL = "https://unpkg.com/easymde/dist/easymde.min.css"
SARBACANE_SCRIPT_URL = "https://forms.sbc29.com/form.js"
SARBACANE_CONNECT_URL = "https://api.sarbacane.com/v1/forms/contacts/upsert"
COOKIE_BANNER_JS_URL = "https://unpkg.com/tarteaucitronjs@1.15.0/tarteaucitron.js"
COOKIE_BANNER_LANG_URL = (
    "https://unpkg.com/tarteaucitronjs@1.15.0/lang/tarteaucitron.fr.js"
)
COOKIE_BANNER_SERVICES_URL = (
    "https://unpkg.com/tarteaucitronjs@1.15.0/tarteaucitron.services.js"
)
AUTOCOMPLETE_SCRIPT_SRC = "https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete.js@10.2.9/dist/autoComplete.min.js"  # noqa
MATOMO_INSTANCE_URL = os.getenv("MATOMO_INSTANCE_URL", "https://stats.beta.gouv.fr")
MATOMO_INSTANCE_SITE_ID = os.getenv("MATOMO_INSTANCE_SITE_ID")
CHARTS_JS_URL = "https://cdn.jsdelivr.net/npm/chart.js@3.0.0/dist/chart.min.js"
CHARTS_JS_DATALABEL_URL = "https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"

if "test" in sys.argv:
    GOUV_ADDRESS_SEARCH_API_DISABLED = True
    GOUV_ADDRESS_SEARCH_API_BASE_URL = ""
else:
    GOUV_ADDRESS_SEARCH_API_DISABLED = getenv_bool(
        "GOUV_ADDRESS_SEARCH_API_DISABLED", True
    )
    GOUV_ADDRESS_SEARCH_API_BASE_URL = os.getenv(
        "GOUV_ADDRESS_SEARCH_API_BASE_URL", "https://api-adresse.data.gouv.fr/search/"
    )

# Content security policy
CSP_DEFAULT_SRC = ("'self'",)
CSP_CONNECT_SRC = (
    "'self'",
    f"{MATOMO_INSTANCE_URL.removesuffix('/')}/matomo.php",
    f"{MATOMO_INSTANCE_URL.removesuffix('/')}/piwik.php",
    SARBACANE_CONNECT_URL,
)
CSP_IMG_SRC = (
    "'self'",
    "data:",
    "https://www.service-public.fr/resources/v-5cf79a7acf/web/css/img/png/",
)
CSP_SCRIPT_SRC = (
    "'self'",
    STIMULUS_JS_URL,
    CHARTS_JS_URL,
    CHARTS_JS_DATALABEL_URL,
    MD_EDITOR_JS_URL,
    SARBACANE_SCRIPT_URL,
    COOKIE_BANNER_JS_URL,
    COOKIE_BANNER_LANG_URL,
    COOKIE_BANNER_SERVICES_URL,
    "https://code.jquery.com/jquery-3.6.1.js",
    "https://code.jquery.com/ui/1.13.1/jquery-ui.js",
)

CSP_STYLE_SRC = (
    "'self'",
    MD_EDITOR_CSS_URL,
)

CSP_STYLE_SRC_ATTR = (
    "'unsafe-hashes'",
    "'sha256-I/4Jcdrg5KNFrU0X4p2nNmjeGh9aI+9ac0cUllI5SwY='",
    "'sha256-vYd+FsML43MBXhP+pXOhW9h0Cdq43hkCe4Im/yyvhss='",
)

CSP_OBJECT_SRC = ("'none'",)
CSP_FRAME_SRC = (
    *list(
        chain.from_iterable(
            [
                [
                    f"https://www.youtube.com/embed/{video_id}",
                    f"https://www.youtube-nocookie.com/embed/{video_id}",
                    f"http://www.youtube.com/embed/{video_id}",
                    f"http://www.youtube-nocookie.com/embed/{video_id}",
                ]
                for video_id in [
                    "hATrqHG4zYQ",
                    "WTHj_kQXnzs",
                    "ihsm-36I-fE",
                    "AJGo6bydQss",
                ]
            ]
        )
    ),
)

CSP_INCLUDE_NONCE_IN = ("script-src", "style-src")

if not GOUV_ADDRESS_SEARCH_API_DISABLED:
    CSP_CONNECT_SRC = (*CSP_CONNECT_SRC, GOUV_ADDRESS_SEARCH_API_BASE_URL)
    CSP_SCRIPT_SRC = (
        *CSP_SCRIPT_SRC,
        AUTOCOMPLETE_SCRIPT_SRC,
    )

if MATOMO_INSTANCE_URL:
    CSP_SCRIPT_SRC = (
        *CSP_SCRIPT_SRC,
        f"{MATOMO_INSTANCE_URL.removesuffix('/')}/matomo.js",
        f"{MATOMO_INSTANCE_URL.removesuffix('/')}/piwik.js",
    )

# Admin Page settings
ADMIN_URL = os.getenv("ADMIN_URL")
ADMINS = [(os.getenv("ADMIN_NAME"), os.getenv("ADMIN_EMAIL"))]

# Sessions
SESSION_COOKIE_AGE = int(
    os.getenv("SESSION_COOKIE_AGE", 86400)
)  # default: 24 hours, in seconds
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Cookie security
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = getenv_bool("SESSION_COOKIE_SECURE", True)
CSRF_COOKIE_SECURE = getenv_bool("CSRF_COOKIE_SECURE", True)

# SSL security
SECURE_SSL_REDIRECT = getenv_bool("SECURE_SSL_REDIRECT", True)
SECURE_HSTS_SECONDS = os.getenv("SECURE_HSTS_SECONDS")

# django_OTP_throttling
OTP_TOTP_THROTTLE_FACTOR = int(os.getenv("OTP_TOTP_THROTTLE_FACTOR", 1))

# Functional tests behaviour
HEADLESS_FUNCTIONAL_TESTS = getenv_bool("HEADLESS_FUNCTIONAL_TESTS", True)

# Disable logging in tests
if "test" in sys.argv:
    logging.disable(logging.CRITICAL)
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": True,
        "handlers": {
            "file": {
                "level": "DEBUG",
                "class": "logging.NullHandler",
            },
        },
    }

BYPASS_FIRST_LIVESERVER_CONNECTION = getenv_bool(
    "BYPASS_FIRST_LIVESERVER_CONNECTION", False
)

# Celery settings
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379")
JSON_CONTENT_TYPE = "application/json"
JSON_SERIALIZER = "json"

CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_RESULT_SERIALIZER = JSON_SERIALIZER
CELERY_TASK_SERIALIZER = JSON_SERIALIZER
CELERY_ACCEPT_CONTENT = [JSON_CONTENT_TYPE]

SITE_DESCRIPTION = "Accompagnez vos usagers en toute sécurité"

# COVID-19 changes
ETAT_URGENCE_2020_LAST_DAY = datetime.strptime(
    os.getenv("ETAT_URGENCE_2020_LAST_DAY"), "%d/%m/%Y %H:%M:%S %z"
)

# Staff Organisation name
STAFF_ORGANISATION_NAME = "BetaGouv"

# Shell Plus
SHELL_PLUS_IMPORTS = [
    "from datetime import datetime, timedelta",
]

# Datapass
DATAPASS_KEY = os.getenv("DATAPASS_KEY", None)
DATAPASS_FROM_EMAIL = os.getenv("DATAPASS_FROM_EMAIL", None)
DATAPASS_TO_EMAIL = os.getenv("DATAPASS_TO_EMAIL", None)
DATAPASS_CODE_FOR_ID_GENERATOR = "datapassid"

AC_IMPORT_HABILITATION_REQUESTS = getenv_bool("AC_IMPORT_HABILITATION_REQUESTS", False)

SUPPORT_EMAIL = "connexion@aidantsconnect.beta.gouv.fr"
AC_CONTACT_EMAIL = "contact@aidantsconnect.beta.gouv.fr"

MANDAT_EXPIRED_SOON = 30
MANDAT_EXPIRED_SOON_EMAIL_SUBJECT = os.getenv(
    "MANDAT_EXPIRED_SOON_EMAIL_SUBJECT", "Ces mandats vont bientôt expirer"
)
MANDAT_EXPIRED_SOON_EMAIL_FROM = os.getenv(
    "MANDAT_EXPIRED_SOON_EMAIL_FROM", SUPPORT_EMAIL
)

WORKERS_NO_TOTP_NOTIFY_EMAIL_SUBJECT = os.getenv(
    "WORKERS_NO_TOTP_NOTIFY_EMAIL_SUBJECT", ""
)
WORKERS_NO_TOTP_NOTIFY_EMAIL_FROM = os.getenv(
    "WORKERS_NO_TOTP_NOTIFY_EMAIL_FROM", SUPPORT_EMAIL
)

PHONENUMBER_DEFAULT_REGION = os.getenv("PHONENUMBER_DEFAULT_REGION", "FR")
FRENCH_REGION_CODES = ("FR", "GP", "GF", "MQ", "RE", "KM", "PM")

AIDANTS__ORGANISATIONS_CHANGED_EMAIL_SUBJECT = os.getenv(
    "AIDANTS__ORGANISATIONS_CHANGED_EMAIL_SUBJECT",
    "La liste des organisations dont vous faites partie a changé",
)
AIDANTS__ORGANISATIONS_CHANGED_EMAIL_FROM = os.getenv(
    "AIDANTS__ORGANISATIONS_CHANGED_EMAIL_FROM", SUPPORT_EMAIL
)

default = "3"
val = os.getenv("EMAIL_CONFIRMATION_EXPIRE_DAYS", default)
EMAIL_CONFIRMATION_EXPIRE_DAYS = int(val) if val.isnumeric() else default

EMAIL_CONFIRMATION_EXPIRE_DAYS_EMAIL_FROM = os.getenv(
    "EMAIL_CONFIRMATION_EXPIRE_DAYS_EMAIL_FROM", SUPPORT_EMAIL
)

EMAIL_CONFIRMATION_EXPIRE_DAYS_EMAIL_SUBJECT = os.getenv(
    "EMAIL_CONFIRMATION_EXPIRE_DAYS_EMAIL_SUBJECT",
    "Merci de confirmer votre adresse email pour le processus d'habilitation "
    "Aidant Connect.",
)

EMAIL_CONFIRMATION_SUPPORT_CONTACT_EMAIL = os.getenv(
    "EMAIL_CONFIRMATION_SUPPORT_CONTACT_EMAIL", SUPPORT_EMAIL
)

EMAIL_CONFIRMATION_SUPPORT_CONTACT_SUBJECT = os.getenv(
    "EMAIL_CONFIRMATION_SUPPORT_CONTACT_SUBJECT",
    "Je ne reçois pas les emails de confirmation de mon adresse email",
)

EMAIL_CONFIRMATION_SUPPORT_CONTACT_BODY = os.getenv(
    "EMAIL_CONFIRMATION_SUPPORT_CONTACT_BODY",
    """Bonjour,

    Je vous contacte car je ne reçois pas les emails de confirmation de mon adresse email.""",  # NOQA
)

EMAIL_ORGANISATION_REQUEST_FROM = os.getenv(
    "EMAIL_ORGANISATION_REQUEST_FROM", SUPPORT_EMAIL
)

EMAIL_HABILITATION_ISSUER_EMAIL_ALREADY_EXISTS_SUBJECT = os.getenv(
    "EMAIL_HABILITATION_ISSUER_EMAIL_ALREADY_EXISTS_SUBJECT",
    "Aidants Connect - Rappel de votre profil demandeur",
)

EMAIL_ORGANISATION_REQUEST_CREATION_SUBJECT = os.getenv(
    "EMAIL_ORGANISATION_REQUEST_CREATION_SUBJECT",
    "Aidants Connect - Votre demande d’habilitation a été créée",
)

EMAIL_ORGANISATION_REQUEST_SUBMISSION_SUBJECT = os.getenv(
    "EMAIL_ORGANISATION_REQUEST_CREATION_SUBJECT",
    "Aidants Connect - Votre demande d’habilitation a été soumise",
)

EMAIL_ORGANISATION_REQUEST_MODIFICATION_SUBJECT = os.getenv(
    "EMAIL_ORGANISATION_REQUEST_MODIFICATION_SUBJECT",
    "Aidants Connect - Votre demande d’habilitation a été modifiée",
)

EMAIL_NEW_MESSAGE_RECEIVED_SUBJECT = os.getenv(
    "EMAIL_NEW_MESSAGE_RECEIVED_SUBJECT",
    "Aidants Connect - Vous avez reçu un nouveau message de l’équipe Aidants Connect",
)

EMAIL_WELCOME_AIDANT_SUBJECT = os.getenv(
    "EMAIL_WELCOME_AIDANT_SUBJECT", "Bienvenue dans la communauté Aidants Connect"
)
EMAIL_WELCOME_AIDANT_FROM = os.getenv("EMAIL_WELCOME_AIDANT_FROM", SUPPORT_EMAIL)
EMAIL_WELCOME_AIDANT_GUIDE_URL = os.getenv(
    "EMAIL_WELCOME_AIDANT_GUIDE_URL",
    "https://aidantsconnect.beta.gouv.fr/guide_utilisation/",
)
EMAIL_WELCOME_AIDANT_RESSOURCES_URL = os.getenv(
    "EMAIL_WELCOME_AIDANT_RESSOURCES_URL",
    "https://aidantsconnect.beta.gouv.fr/ressources/",
)
EMAIL_WELCOME_AIDANT_FAQ_URL = os.getenv(
    "EMAIL_WELCOME_AIDANT_FAQ_URL", "https://aidantsconnect.beta.gouv.fr/faq/"
)
EMAIL_WELCOME_AIDANT_FICHES_TANGIBLES = os.getenv(
    "EMAIL_WELCOME_AIDANT_FICHES_TANGIBLES",
    "https://www.etsijaccompagnais.fr/ressources-des-aidants",
)
EMAIL_WELCOME_AIDANT_TUTORIEL_INTERACTIF = os.getenv(
    "EMAIL_WELCOME_AIDANT_TUTORIEL_INTERACTIF",
    "https://www.etsijaccompagnais.fr/tutoriel-aidants-connect",
)
EMAIL_WELCOME_AIDANT_CONTACT_URL = os.getenv(
    "EMAIL_WELCOME_AIDANT_CONTACT_URL", "contact@aidantsconnect.beta.gouv.fr"
)

EMAIL_AIDANT_DEACTIVATION_WARN_SUBJECT = os.getenv(
    "EMAIL_AIDANT_DEACTIVATION_WARN_SUBJECT",
    "Aidants Connect — Réactivez votre compte",
)
EMAIL_AIDANT_DEACTIVATION_WARN_FROM = os.getenv(
    "EMAIL_AIDANT_DEACTIVATION_WARN_SUBJECT", SUPPORT_EMAIL
)

EMAIL_AIDANT_DEACTIVATION_NOTICE_SUBJECT = os.getenv(
    "EMAIL_AIDANT_DEACTIVATION_NOTICE_SUBJECT",
    "Aidants Connect — Votre compte a été désactivé",
)
EMAIL_AIDANT_DEACTIVATION_NOTICE_FROM = os.getenv(
    "EMAIL_AIDANT_DEACTIVATION_NOTICE_FROM", SUPPORT_EMAIL
)

EMAIL_AIDANT_ACTIVATED_SUBJECT = os.getenv(
    "EMAIL_AIDANT_ACTIVATED_SUBJECT",
    "Aidants Connect — Le compte de {aidant_name} vient d’être activé !",
)
EMAIL_AIDANT_ACTIVATED_FROM = os.getenv("EMAIL_AIDANT_ACTIVATED_FROM", SUPPORT_EMAIL)
EMAIL_AIDANT_ACTIVATED_CONTACT_EMAIL = os.getenv(
    "EMAIL_AIDANT_ACTIVATED_CONTACT_EMAIL", SUPPORT_EMAIL
)

EMAIL_AIDANT_NEW_FEATURE_NOTIFICATION_FROM = os.getenv(
    "EMAIL_AIDANT_NEW_FEATURE_NOTIFICATION_FROM", SUPPORT_EMAIL
)
EMAIL_AIDANT_NEW_FEATURE_NOTIFICATION_SUBJECT = os.getenv(
    "EMAIL_AIDANT_NEW_FEATURE_NOTIFICATION_SUBJECT",
    "De nouvelles fonctionnalités vous attendent dans votre espace !",
)

EMAIL_ACTIVITY_TRACKING_WARN_FROM = os.getenv(
    "EMAIL_ACTIVITY_TRACKING_WARN_FROM", SUPPORT_EMAIL
)

EMAIL_CO_RERERENT_CREATION_FROM = os.getenv(
    "EMAIL_CO_RERERENT_CREATION_FROM", SUPPORT_EMAIL
)

EMAIL_ORGANISATION_FORMATION_NEW_ATTENDANT_GRIST_LINK = os.getenv(
    "EMAIL_ORGANISATION_FORMATION_NEW_ATTENDANT_GRIST_LINK",
    "https://grist.incubateur.anct.gouv.fr/o/anct/t7BQn7enpHrR/Formations/p/82",
)

CONSEILLER_NUMERIQUE_EMAIL = os.getenv(
    "CONSEILLER_NUMERIQUE_EMAIL", "@conseiller-numerique.fr"
)
CONSEILLER_NUMERIQUE_PAGE = os.getenv(
    "CONSEILLER_NUMERIQUE_PAGE", "https://www.conseiller-numerique.gouv.fr/"
)

TIMEDELTA_IN_DAYS_FOR_INSCRIPTION = int(
    os.getenv("TIMEDELTA_IN_DAYS_FOR_INSCRIPTION", 28)
)

SHORT_TIMEDELTA_IN_DAYS_FOR_INSCRIPTION = int(
    os.getenv("SHORT_TIMEDELTA_IN_DAYS_FOR_INSCRIPTION", 14)
)

SHORT_TIMEDELTA_ATTENDANTS_COUNT_FOR_INSCRIPTION = int(
    os.getenv("SHORT_TIMEDELTA_ATTENDANTS_COUNT_FOR_INSCRIPTION", 4)
)

PIX_METABASE_USER = os.getenv("PIX_METABASE_USER")
PIX_METABASE_PASSWORD = os.getenv("PIX_METABASE_PASSWORD")
PIX_METABASE_CARD_ID = os.getenv("PIX_METABASE_CARD_ID")

if "test" in sys.argv:
    # Force disable SMS API during tests
    SMS_API_DISABLED = True
else:
    SMS_API_DISABLED = getenv_bool("SMS_API_DISABLED", True)


FF_ACTIVATE_SMS_CONSENT = getenv_bool("FF_ACTIVATE_SMS_CONSENT", True)
SMS_RESPONSE_CONSENT = os.getenv("SMS_RESPONSE_CONSENT", "Oui")
SMS_SUPPORT_EMAIL = os.getenv("SMS_SUPPORT_EMAIL", SUPPORT_EMAIL)
SMS_SUPPORT_EMAIL_SEND_FAILURE_SUBJET = os.getenv(
    "SMS_SUPPORT_EMAIL_SEND_FAILURE_SUBJET",
    "Problème durant l'envoi d'un SMS de demande de consentement pour un mandat à distance",  # noqa
)
LM_SMS_SERVICE_USERNAME = os.getenv("LM_SMS_SERVICE_USERNAME")
LM_SMS_SERVICE_PASSWORD = os.getenv("LM_SMS_SERVICE_PASSWORD")
LM_SMS_SERVICE_BASE_URL = os.getenv("LM_SMS_SERVICE_BASE_URL")
LM_SMS_SERVICE_OAUTH2_ENDPOINT = os.getenv("LM_SMS_SERVICE_OAUTH2_ENDPOINT")
LM_SMS_SERVICE_SND_SMS_ENDPOINT = os.getenv("LM_SMS_SERVICE_SND_SMS_ENDPOINT")

# URLS
SANDBOX_URL = os.getenv("SANDBOX_URL", "")
SANDBOX_API_URL = os.getenv("SANDBOX_API_URL", "")
SANDBOX_API_TOKEN = os.getenv("SANDBOX_API_TOKEN", "TOKEN")
WEBINAIRE_SUBFORM_URL = os.getenv("WEBINAIRE_SUBFORM_URL", "#")

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,
}

BLOCKLIST_CONFIG = {}
BLOCKLIST_EXPIRE_SECONDS = int(os.getenv("BLOCKLIST_THROTTLE_SECONDS", 1))
BLOCKLIST_REQUEST_THRESHOLD = int(os.getenv("BLOCKLIST_THROTTLE_THRESHOLD", 10))
BLOCKLIST_THROTTLE_MS = int(os.getenv("BLOCKLIST_THROTTLE_MS", 200))

try:
    DRIFTED_OTP_CARD_TOLERANCE = int(os.getenv("DRIFTED_OTP_CARD_TOLERANCE", 30))
except ValueError:
    DRIFTED_OTP_CARD_TOLERANCE = 20

PK_MEDNUM_FORMATION_TYPE = os.getenv("PK_MEDNUM_FORMATION_TYPE", 1)

GRIST_URL_SERVER = os.getenv("GRIST_URL_SERVER", "")
GRIST_DOCUMENT_ID = os.getenv("GRIST_DOCUMENT_ID", "")
GRIST_REBORDING_TABLE_ID = os.getenv("GRIST_REBORDING_TABLE_ID", "")
GRIST_API_KEY = os.getenv("GRIST_API_KEY", "")
GRIST_FORMATION_REPORTING_TABLE_ID = os.getenv("GRIST_FORMATION_REPORTING_TABLE_ID", "")
GRIST_FORMATION_ORGANIZATION_TABLE_ID = os.getenv(
    "GRIST_FORMATION_ORGANIZATION_TABLE_ID", ""
)
GRIST_ATTENDEES_TABLE_ID = os.getenv("GRIST_ATTENDEES_TABLE_ID", "")

FORMATION_MAX_ATTENDANTS = int(os.getenv("FORMATION_MAX_ATTENDANTS", 18))
GRIST_ID_MEDNUM = int(os.getenv("GRIST_ID_MEDNUM", 3))
GRIST_ID_FAMILLE_RURALES = int(os.getenv("GRIST_ID_FAMILLE_RURALES", 1))


LIVESTORM_API_KEY = os.getenv("LIVESTORM_API_KEY")


FF_WELCOME_AIDANT = getenv_bool("FF_WELCOME_AIDANT", False)
FF_DEACTIVATE_OLD_AIDANT = getenv_bool("FF_DEACTIVATE_OLD_AIDANT", False)
FF_EMAIL_CO_RERERENT_CREATION = getenv_bool("FF_EMAIL_CO_RERERENT_CREATION", False)


URL_FORMATION = os.getenv("URL_FORMATION", get_random_string(12))
