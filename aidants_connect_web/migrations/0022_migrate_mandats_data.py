# Generated by Django 3.0.3 on 2020-04-01 13:56

from django.db import migrations
from django.utils import timezone


def populate_mandats_organisations(apps, schema_editor):
    Mandat = apps.get_model('aidants_connect_web', 'Mandat')

    for mandat in Mandat.objects.all():
        mandat.organisation = mandat.aidant.organisation
        mandat.save()


def populate_mandats_autorisations(apps, schema_editor):
    Usager = apps.get_model('aidants_connect_web', 'Usager')
    Autorisation = apps.get_model('aidants_connect_web', 'Autorisation')

    for usager in Usager.objects.all():

        usager_mandats = usager.mandats.order_by('creation_date')
        usager_organisations = list(set([mandat.aidant.organisation for mandat in usager_mandats]))
        for organisation in usager_organisations:

            # We iterate through all the current `mandats` an `usager` has with each `organisation`.
            # Each of these `mandats` should now simply be an `autorisation` linked to a "master
            # mandat". We use the oldest "legacy mandat" to become that "master mandat", and create
            # `autorisations` linked to it. The other "legacy mandats", recognizable because they
            # won't conatin any `autorisations`, will be deleted in a further migration step.

            org_usager_mandats = usager_mandats.filter(aidant__organisation=organisation)
            first_org_usager_mandat = org_usager_mandats.first()

            for mandat in org_usager_mandats:
                Autorisation.objects.create(
                    mandat=first_org_usager_mandat,
                    demarche=mandat.demarche,
                    creation_date=mandat.creation_date,
                    expiration_date=mandat.expiration_date,
                )


def populate_mandats_attestations(apps, schema_editor):
    Mandat = apps.get_model('aidants_connect_web', 'Mandat')
    Attestation = apps.get_model('aidants_connect_web', 'Attestation')

    for mandat in Mandat.objects.all():
        Attestation.objects.create(
            mandat=mandat,
            type='creation',
            creation_date=mandat.creation_date,
        )


def delete_supernumerary_mandats(apps, schema_editor):
    Mandat = apps.get_model('aidants_connect_web', 'Mandat')

    ids_to_delete = []
    for mandat in Mandat.objects.all():
        if mandat.autorisations.count() == 0:
            ids_to_delete.append(mandat.id)

    Mandat.objects.filter(pk__in=ids_to_delete).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('aidants_connect_web', '0021_add_models_and_fields'),
    ]

    operations = [
        migrations.RunPython(populate_mandats_organisations),
        migrations.RunPython(populate_mandats_autorisations),
        migrations.RunPython(populate_mandats_attestations),
        migrations.RunPython(delete_supernumerary_mandats),
    ]
