# Generated by Django 4.2.10 on 2024-02-29 14:44

import django.db.models.deletion
from django.db import migrations, models

import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('aidants_connect_web', '0056_formationtype_formation'),
    ]

    operations = [
        migrations.CreateModel(
            name='FormationAttendant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendant_id', models.PositiveIntegerField()),
            ],
        ),
        migrations.AddConstraint(
            model_name='formation',
            constraint=models.CheckConstraint(check=models.Q(('start_datetime__lt', models.F('end_datetime'))), name='must_starts_before_it_ends'),
        ),
        migrations.AddConstraint(
            model_name='formation',
            constraint=models.CheckConstraint(check=models.Q(('duration__gt', 0)), name='must_be_a_non_0_duration'),
        ),
        migrations.AddConstraint(
            model_name='formation',
            constraint=models.CheckConstraint(check=models.Q(('max_attendants__gt', 0)), name='cant_have_0_max_attendants'),
        ),
        migrations.AddConstraint(
            model_name='formationtype',
            constraint=models.CheckConstraint(check=models.Q(('label__isnull_or_blank', False)), name='not_blank_label'),
        ),
        migrations.AddField(
            model_name='formationattendant',
            name='attendant_content_type',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_formations_attendants', to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='formationattendant',
            name='formation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='attendants', to='aidants_connect_web.formation'),
        ),
        migrations.AlterUniqueTogether(
            name='formationattendant',
            unique_together={('attendant_content_type', 'attendant_id', 'formation')},
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='formationattendant',
            trigger=pgtrigger.compiler.Trigger(name='check_attendants_count', sql=pgtrigger.compiler.UpsertTriggerSql(declare='DECLARE attendants_count INTEGER; max_attendants_count INTEGER;', func="-- prevent concurrent inserts from multiple transactions\nLOCK TABLE aidants_connect_web_formationattendant IN EXCLUSIVE MODE;\n\nSELECT INTO attendants_count COUNT(*) \nFROM aidants_connect_web_formationattendant \nWHERE formation_id = NEW.formation_id;\n\nSELECT max_attendants INTO max_attendants_count\nFROM aidants_connect_web_formation \nWHERE id = NEW.formation_id;\n\nIF attendants_count >= max_attendants_count THEN\n    RAISE EXCEPTION 'Formation is already full.' USING ERRCODE = 'check_violation';\nEND IF;\n\nRETURN NEW;", hash='e48eaa4325ffce7f40f837fb8196b27bd444d563', operation='INSERT OR UPDATE', pgid='pgtrigger_check_attendants_count_f995d', table='aidants_connect_web_formationattendant', when='BEFORE')),
        ),
    ]
