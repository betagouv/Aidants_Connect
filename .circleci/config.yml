# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: "2.1"
orbs:
  browser-tools: circleci/browser-tools@1.5.1

parameters:
  python-img-tag:
    type: string
    default: "3.11.10-browsers"
  db-img-tag:
    type: string
    default: "12.12"
  workingdir:
    type: string
    default: "~/repo"
  cache-version:
    type: string
    default: "v5-dependencies"

executors:
  testbed:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-img-tag >>
      - image: cimg/postgres:<< pipeline.parameters.db-img-tag >>
        environment:
          POSTGRES_USER: aidants_connect_team
          POSTGRES_DB: aidants_connect

workflows:
  all:
    jobs:
      - build
      - code-checks:
          requires:
            - build
      - test:
          requires:
            - build
      - coverage:
          requires:
            - test
      - accessibility:
          requires:
            - test

jobs:
  build:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-img-tag >>
    working_directory: << pipeline.parameters.workingdir >>
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - << pipeline.parameters.cache-version >>-{{ checksum "Pipfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - << pipeline.parameters.cache-version >>-

      - run:
          name: install dependencies
          command: |
            python -m venv /tmp/venv
            . /tmp/venv/bin/activate
            pip install pipenv
            pipenv install --dev

      - save_cache:
          paths:
            - /tmp/venv
          key: << pipeline.parameters.cache-version >>-{{ checksum "Pipfile.lock" }}
  code-checks:
    executor: testbed
    working_directory: << pipeline.parameters.workingdir >>

    steps:
      - checkout

      - restore_cache:
          keys:
            - << pipeline.parameters.cache-version >>-{{ checksum "Pipfile.lock" }}

      - run:
          name: run linting
          command: |
            . /tmp/venv/bin/activate
            pre-commit run --from-ref=main --to-ref=HEAD
  test:
    executor: testbed
    parallelism: 8
    working_directory: << pipeline.parameters.workingdir >>

    steps:
      - checkout
      - browser-tools/install-firefox
      - browser-tools/install-geckodriver

      - restore_cache:
          keys:
            - << pipeline.parameters.cache-version >>-{{ checksum "Pipfile.lock" }}

      - run:
          name: run unit tests
          # Refs:
          # https://circleci.com/docs/parallelism-faster-jobs/
          # https://support.circleci.com/hc/en-us/articles/360048786831-Use-test-splitting-with-Python-Django-tests
          command: |
            TESTFILES=$(circleci tests glob '**/test*.py' | grep test_functional | sort | uniq)
            TESTFILES=$TESTFILES$IFS$(circleci tests glob '**/test*.py' | grep -v test_functional | grep -v test_accessibility | sort | uniq)
            echo $TESTFILES | tr "$IFS" '\n' > test_filenames.txt
            TESTFILES=$(circleci tests split --split-by=timings test_filenames.txt | tr '/' '.' | sed 's/.py//g')

            mkdir -p staticfiles

            . /tmp/venv/bin/activate
            python manage.py collectstatic --noinput
            coverage run --parallel-mode manage.py test --verbosity=2 $TESTFILES --exclude-tag=accessibility
      - persist_to_workspace:
          root: .
          paths: [".coverage*"]
  coverage:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-img-tag >>
    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
            - << pipeline.parameters.cache-version >>-{{ checksum "Pipfile.lock" }}

      - attach_workspace:
          at: .

      - run:
          name: coverage report
          command: |
            . /tmp/venv/bin/activate
            coverage combine
            coverage report
            coverage html

      - store_artifacts:
          path: htmlcov

  accessibility:
    executor: testbed
    parallelism: 8
    working_directory: << pipeline.parameters.workingdir >>
    steps:
      - checkout
      - browser-tools/install-chrome

      - restore_cache:
          keys:
            - << pipeline.parameters.cache-version >>-{{ checksum "Pipfile.lock" }}

      - run:
          name: Install npm dependencies
          command: npm install

      - run:
          name: Prepare Django environment
          command: |
            mkdir -p staticfiles
            . /tmp/venv/bin/activate
            python manage.py collectstatic --noinput

      - run:
          name: Start Django server in background
          command: |
            . /tmp/venv/bin/activate
            python manage.py runserver 0.0.0.0:8000 &
            sleep 10

      - run:
          name: Split paths and run Lighthouse accessibility tests
          command: |
            . /tmp/venv/bin/activate
            python scripts/extract_public_paths.py | tr ',' '\n' > all_paths.txt

            WORKER_PATHS=$(circleci tests split all_paths.txt)

            echo "Worker $CIRCLE_NODE_INDEX testing paths:"
            echo "$WORKER_PATHS"

            for path in $WORKER_PATHS; do
              url="http://localhost:8000$path"
              echo "Testing URL: $url"
              npx lhci autorun --config=.lighthouserc.json --collect.url="$url"
            done

      - store_artifacts:
          path: .lighthouseci
          destination: lighthouse-accessibility-reports-worker-$CIRCLE_NODE_INDEX
